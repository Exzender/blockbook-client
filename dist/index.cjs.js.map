{"version":3,"file":"index.cjs.js","sources":["../src/types/common.ts","../src/types/bitcoin.ts","../src/types/ethereum.ts","../src/BaseBlockbook.ts","../src/Blockbook.ts","../src/BlockbookBitcoin.ts","../src/BlockbookEthereum.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { requiredOptionalCodec, extendCodec } from '@faast/ts-common'\n\nexport const Paginated = t.type({\n  page: t.number, // 1,\n  totalPages: t.number, // 30,\n  itemsOnPage: t.number, // 1000,\n}, 'Paginated')\nexport type Paginated = t.TypeOf<typeof Paginated>\n\nexport const BlockbookConfig = requiredOptionalCodec(\n  {\n    /**\n     * An array of blockbook nodes to query. Must not be empty.\n     */\n    nodes: t.array(t.string),\n  },\n  {\n    /**\n     * Set true to disable response validation for performance, or use in javascript.\n     *\n     * Default: `false`\n     */\n    disableTypeValidation: t.boolean,\n  },\n  'BlockbookConfig',\n)\nexport type BlockbookConfig = t.TypeOf<typeof BlockbookConfig>\n\n/*\n * Get status\n */\n\nexport const BlockbookInfo = t.type({\n  coin: t.string, // 'Bitcoin',\n  host: t.string, // 'blockbook',\n  version: t.string, // '0.3.1',\n  gitCommit: t.string, // '3d9ad91',\n  buildTime: t.string, // '2019-05-17T14:34:00+00:00',\n  syncMode: t.boolean, // true,\n  initialSync: t.boolean, // false,\n  inSync: t.boolean, // true,\n  bestHeight: t.number, // 577261,\n  lastBlockTime: t.string, // '2019-05-22T18:03:33.547762973+02:00',\n  inSyncMempool: t.boolean, // true,\n  lastMempoolTime: t.string, // '2019-05-22T18:10:10.27929383+02:00',\n  mempoolSize: t.number, // 17348,\n  decimals: t.number, // 8,\n  dbSize: t.number, // 191887866502,\n  about: t.string, // 'Blockbook - blockchain indexer for ...'\n}, 'BlockbookInfo')\nexport type BlockbookInfo = t.TypeOf<typeof BlockbookInfo>\n\nexport const BackendInfo = requiredOptionalCodec(\n  {\n    chain: t.string, // 'main',\n    blocks: t.number, // 577261,\n    bestBlockHash: t.string, // '0000000000000000000ca8c902aa58b3118a7f35d093e25a07f17bcacd91cabf',\n    difficulty: t.string, // '6704632680587.417',\n    version: t.string, // '180000',\n  },\n  {\n    protocolVersion: t.string, // '70015',\n    subversion: t.string, // '/Satoshi:0.18.0/',\n    sizeOnDisk: t.number, // 250504188580,\n    headers: t.number, // 577261,\n    timeOffset: t.number, // 0,\n    warnings: t.string, // ''\n  },\n  'BackendInfo',\n)\nexport type BackendInfo = t.TypeOf<typeof BackendInfo>\n\nexport const SystemInfo = t.type({\n  blockbook: BlockbookInfo,\n  backend: BackendInfo,\n}, 'ApiStatus')\nexport type SystemInfo = t.TypeOf<typeof SystemInfo>\n\n/*\n * Get block hash\n */\n\n export const BlockHashResponse = t.type({\n  blockHash: t.string, // 'ed8f3af8c10ca70a136901c6dd3adf037f0aea8a93fbe9e80939214034300f1e'\n}, 'BlockHashResponse')\nexport type BlockHashResponse = t.TypeOf<typeof BlockHashResponse>\n\n/*\n * Get transaction\n */\n\n/*\ntype Vin struct {\n\tTxid       string                   `json:\"txid,omitempty\"`\n\tVout       uint32                   `json:\"vout,omitempty\"`\n\tSequence   int64                    `json:\"sequence,omitempty\"`\n\tN          int                      `json:\"n\"`\n\tAddrDesc   bchain.AddressDescriptor `json:\"-\"`\n\tAddresses  []string                 `json:\"addresses,omitempty\"`\n\tSearchable bool                     `json:\"-\"`\n\tValueSat   *Amount                  `json:\"value,omitempty\"`\n\tHex        string                   `json:\"hex,omitempty\"`\n\tAsm        string                   `json:\"asm,omitempty\"`\n\tCoinbase   string                   `json:\"coinbase,omitempty\"`\n}\n*/\nexport const NormalizedTxCommonVin = requiredOptionalCodec(\n  {\n    n: t.number, // 0\n  },\n  {\n    txid: t.string,\n    vout: t.number,\n    sequence: t.number,\n    addresses: t.array(t.string), // ['1DjPjQq4WZwjRvCy6LwdenCu6ynS2m3ob1']\n    value: t.string,\n    hex: t.string,\n    asm: t.string,\n    coinbase: t.string, // '044c86041b020602'\n    isAddress: t.boolean, // true\n  },\n  'NormalizedTxCommonVin'\n)\n\n/*\ntype Vout struct {\n\tValueSat    *Amount                  `json:\"value,omitempty\"`\n\tN           int                      `json:\"n\"`\n\tSpent       bool                     `json:\"spent,omitempty\"`\n\tSpentTxID   string                   `json:\"spentTxId,omitempty\"`\n\tSpentIndex  int                      `json:\"spentIndex,omitempty\"`\n\tSpentHeight int                      `json:\"spentHeight,omitempty\"`\n\tHex         string                   `json:\"hex,omitempty\"`\n\tAsm         string                   `json:\"asm,omitempty\"`\n\tAddrDesc    bchain.AddressDescriptor `json:\"-\"`\n\tAddresses   []string                 `json:\"addresses\"`\n\tSearchable  bool                     `json:\"-\"`\n\tType        string                   `json:\"type,omitempty\"`\n}\n*/\nexport const NormalizedTxCommonVout = requiredOptionalCodec(\n  {\n    n: t.number, // 0\n    addresses: t.array(t.string), // ['362wgRYYj8ybZwuQzxE2PNykjJAwStKARz']\n  },\n  {\n    value: t.string, // '1351072'\n    spent: t.boolean,\n    spentTxId: t.string,\n    spentIndex: t.number,\n    spentHeight: t.number,\n    hex: t.string,\n    asm: t.string,\n    type: t.string,\n    isAddress: t.boolean, // true\n  },\n  'NormalizedTxCommonVout'\n)\n\n/*\ntype EthereumSpecific struct {\n\tStatus   int      `json:\"status\"` // 1 OK, 0 Fail, -1 pending\n\tNonce    uint64   `json:\"nonce\"`\n\tGasLimit *big.Int `json:\"gasLimit\"`\n\tGasUsed  *big.Int `json:\"gasUsed\"`\n\tGasPrice *Amount  `json:\"gasPrice\"`\n}\n*/\nexport const EthereumSpecific = t.type({\n  status: t.number, // 1,\n  nonce: t.number, // 2830,\n  gasLimit: t.number, // 36591,\n  gasUsed: t.number, // 36591,\n  gasPrice: t.string, // '11000000000'\n}, 'EthereumSpecific')\nexport type EthereumSpecific = t.TypeOf<typeof EthereumSpecific>\n\n/*\ntype TokenTransfer struct {\n\tType     TokenType `json:\"type\"`\n\tFrom     string    `json:\"from\"`\n\tTo       string    `json:\"to\"`\n\tToken    string    `json:\"token\"`\n\tName     string    `json:\"name\"`\n\tSymbol   string    `json:\"symbol\"`\n\tDecimals int       `json:\"decimals\"`\n\tValue    *Amount   `json:\"value\"`\n}\n */\nexport const TokenTransfer = t.type({\n  type: t.string, // 'ERC20',\n  from: t.string, // '0x9c2e011c0ce0d75c2b62b9c5a0ba0a7456593803',\n  to: t.string, // '0x583cbbb8a8443b38abcc0c956bece47340ea1367',\n  token: t.string, // '0xc32ae45504ee9482db99cfa21066a59e877bc0e6',\n  name: t.string, // 'Tangany Test Token',\n  symbol: t.string, // 'TATETO',\n  decimals: t.number, // 18,\n  value: t.string, // '133800000'\n}, 'TokenTransfer')\nexport type TokenTransfer = t.TypeOf<typeof TokenTransfer>\n\n/*\ntype Tx struct {\n\tTxid             string            `json:\"txid\"`\n\tVersion          int32             `json:\"version,omitempty\"`\n\tLocktime         uint32            `json:\"lockTime,omitempty\"`\n\tVin              []Vin             `json:\"vin\"`\n\tVout             []Vout            `json:\"vout\"`\n\tBlockhash        string            `json:\"blockHash,omitempty\"`\n\tBlockheight      int               `json:\"blockHeight\"`\n\tConfirmations    uint32            `json:\"confirmations\"`\n\tBlocktime        int64             `json:\"blockTime\"`\n\tSize             int               `json:\"size,omitempty\"`\n\tValueOutSat      *Amount           `json:\"value\"`\n\tValueInSat       *Amount           `json:\"valueIn,omitempty\"`\n\tFeesSat          *Amount           `json:\"fees,omitempty\"`\n\tHex              string            `json:\"hex,omitempty\"`\n\tCoinSpecificData interface{}       `json:\"-\"`\n\tCoinSpecificJSON json.RawMessage   `json:\"-\"`\n\tTokenTransfers   []TokenTransfer   `json:\"tokenTransfers,omitempty\"`\n\tEthereumSpecific *EthereumSpecific `json:\"ethereumSpecific,omitempty\"`\n}\n*/\nexport const NormalizedTxCommon = requiredOptionalCodec(\n  {\n    txid: t.string, // '2266ea441e3fbd144e33dc6c62c0d354d59dc267b48efe9a98a6e2fe6584cbd1'\n    vin: t.array(NormalizedTxCommonVin),\n    vout: t.array(NormalizedTxCommonVout),\n    blockHeight: t.number, // 605482\n    confirmations: t.number, // 1\n    blockTime: t.number, // 1574787637\n    value: t.string, // '2592355'\n  },\n  {\n    version: t.number, // 2\n    lockTime: t.number,\n    blockHash: t.string, // '0000000000000000000aac117ba0c0910956020b30e847154311d7d01d50476f'\n    size: t.number,\n    valueIn: t.string,\n    fees: t.string, // '302808'\n    hex: t.string,\n    tokenTransfers: t.array(TokenTransfer),\n    ethereumSpecific: EthereumSpecific,\n  },\n  'NormalizedTxCommon',\n)\nexport type NormalizedTxCommon = t.TypeOf<typeof NormalizedTxCommon>\n\n/**\n * Get address\n */\n\nexport const GetAddressDetailsLevels = t.keyof({\n  basic: null,\n  tokens: null,\n  tokenBalances: null,\n  txids: null,\n  txs: null,\n})\nexport type GetAddressDetailsLevels = t.TypeOf<typeof GetAddressDetailsLevels>\n\nexport const GetAddressDetailsOptions = t.partial({\n  page: t.number,\n  pageSize: t.number,\n  from: t.number,\n  to: t.number,\n  details: GetAddressDetailsLevels,\n})\nexport type GetAddressDetailsOptions = t.TypeOf<typeof GetAddressDetailsOptions>\n\nexport const TokenDetailsTypeERC20 = t.literal('ERC20')\nexport type TokenDetailsTypeERC20 = t.TypeOf<typeof TokenDetailsTypeERC20>\n\nexport const TokenDetailsTypeXpubAddress = t.literal('XPUBAddress')\nexport type TokenDetailsTypeXpubAddress = t.TypeOf<typeof TokenDetailsTypeXpubAddress>\n\nexport const TokenDetailsType = t.union(\n  [\n    TokenDetailsTypeERC20,\n    TokenDetailsTypeXpubAddress,\n  ],\n  'TokenDetailsType',\n)\nexport type TokenDetailsType = t.TypeOf<typeof TokenDetailsType>\n\n/*\ntype Token struct {\n\tType             TokenType `json:\"type\"`\n\tName             string    `json:\"name\"`\n\tPath             string    `json:\"path,omitempty\"`\n\tContract         string    `json:\"contract,omitempty\"`\n\tTransfers        int       `json:\"transfers\"`\n\tSymbol           string    `json:\"symbol,omitempty\"`\n\tDecimals         int       `json:\"decimals,omitempty\"`\n\tBalanceSat       *Amount   `json:\"balance,omitempty\"`\n\tTotalReceivedSat *Amount   `json:\"totalReceived,omitempty\"`\n\tTotalSentSat     *Amount   `json:\"totalSent,omitempty\"`\n\tContractIndex    string    `json:\"-\"`\n}\n*/\nexport const TokenDetailsCommon = requiredOptionalCodec(\n  {\n    type: TokenDetailsType,\n    name: t.string,\n    transfers: t.number,\n  }, {\n    path: t.string,\n    contract: t.string,\n    symbol: t.string,\n    decimals: t.number,\n    balance: t.string,\n    totalReceived: t.string,\n    totalSent: t.string,\n  },\n  'TokenDetailsCommon',\n)\nexport type TokenDetailsCommon = t.TypeOf<typeof TokenDetailsCommon>\n\nexport const TokenDetailsCommonBalance = extendCodec(\n  TokenDetailsCommon,\n  {\n    balance: t.string,\n  },\n  'TokenDetailsCommonBalance',\n)\nexport type TokenDetailsCommonBalance = t.TypeOf<typeof TokenDetailsCommonBalance>\n\n/*\ntype Address struct {\n\tPaging\n\tAddrStr               string                `json:\"address\"`\n\tBalanceSat            *Amount               `json:\"balance\"`\n\tTotalReceivedSat      *Amount               `json:\"totalReceived,omitempty\"`\n\tTotalSentSat          *Amount               `json:\"totalSent,omitempty\"`\n\tUnconfirmedBalanceSat *Amount               `json:\"unconfirmedBalance\"`\n\tUnconfirmedTxs        int                   `json:\"unconfirmedTxs\"`\n\tTxs                   int                   `json:\"txs\"`\n\tNonTokenTxs           int                   `json:\"nonTokenTxs,omitempty\"`\n\tTransactions          []*Tx                 `json:\"transactions,omitempty\"`\n\tTxids                 []string              `json:\"txids,omitempty\"`\n\tNonce                 string                `json:\"nonce,omitempty\"`\n\tUsedTokens            int                   `json:\"usedTokens,omitempty\"`\n\tTokens                []Token               `json:\"tokens,omitempty\"`\n\tErc20Contract         *bchain.Erc20Contract `json:\"erc20Contract,omitempty\"`\n}\n*/\nexport const AddressDetailsCommonBasic = requiredOptionalCodec(\n  {\n    address: t.string, // '1DjPjQq4WZwjRvCy6LwdenCu6ynS2m3ob1',\n    balance: t.string, // '1436057',\n    unconfirmedBalance: t.string, // '0',\n    unconfirmedTxs: t.number, // 0,\n    txs: t.number, // 3,\n  },\n  {\n    totalReceived: t.string,\n    totalSent: t.string,\n    nonTokenTxs: t.number,\n    nonce: t.string,\n    usedTokens: t.number,\n    erc20Contract: t.any,\n  },\n  'AddressDetailsCommonBasic',\n)\nexport type AddressDetailsCommonBasic = t.TypeOf<typeof AddressDetailsCommonBasic>\n\nexport const AddressDetailsCommonTokens = extendCodec(\n  AddressDetailsCommonBasic,\n  {\n    tokens: t.array(TokenDetailsCommon),\n  },\n  'AddressDetailsCommonTokens',\n)\nexport type AddressDetailsCommonTokens = t.TypeOf<typeof AddressDetailsCommonTokens>\n\nexport const AddressDetailsCommonTokenBalances = extendCodec(\n  AddressDetailsCommonBasic,\n  {},\n  {\n    tokens: t.array(TokenDetailsCommonBalance),\n  },\n  'AddressDetailsCommonTokenBalances',\n)\nexport type AddressDetailsCommonTokenBalances = t.TypeOf<typeof AddressDetailsCommonTokenBalances>\n\nexport const AddressDetailsCommonTxids = extendCodec(\n  AddressDetailsCommonTokenBalances,\n  Paginated.props,\n  {\n    txids: t.array(t.string),\n  },\n  'AddressDetailsCommonTxids',\n)\nexport type AddressDetailsCommonTxids = t.TypeOf<typeof AddressDetailsCommonTxids>\n\nexport const AddressDetailsCommonTxs = extendCodec(\n  AddressDetailsCommonTokenBalances,\n  Paginated.props,\n  {\n    txs: t.array(NormalizedTxCommon),\n  },\n  'AddressDetailsCommonTxs',\n)\nexport type AddressDetailsCommonTxs = t.TypeOf<typeof AddressDetailsCommonTxs>\n\n/**\n * Get utxos\n */\n\nexport const GetUtxosOptions = t.partial({\n  confirmed: t.boolean,\n}, 'GetUtxosOptions')\nexport type GetUtxosOptions = t.TypeOf<typeof GetAddressDetailsOptions>\n\nexport const UtxoDetails = requiredOptionalCodec(\n  {\n    txid: t.string, // 'a79e396a32e10856c97b95f43da7e9d2b9a11d446f7638dbd75e5e7603128cac',\n    vout: t.number, // 1,\n    value: t.string, // '39748685',\n    confirmations: t.number, // 47,\n  },\n  {\n    height: t.number, // 2648043,\n    coinbase: t.boolean, // true,\n    lockTime: t.number, // 2648100,\n  },\n  'UtxoDetails',\n)\nexport type UtxoDetails = t.TypeOf<typeof UtxoDetails>\n\nexport const UtxoDetailsXpub = extendCodec(\n  UtxoDetails,\n  {},\n  {\n    address: t.string, // 'DUCd1B3YBiXL5By15yXgSLZtEkvwsgEdqS',\n    path: t.string, // `m/44'/3'/0'/0/0`,\n  },\n  'UtxoDetailsXpub',\n)\nexport type UtxoDetailsXpub = t.TypeOf<typeof UtxoDetailsXpub>\n\n/**\n * Get block\n */\n\n /*\ntype BlockInfo struct {\n\tHash          string      `json:\"hash\"`\n\tPrev          string      `json:\"previousBlockHash,omitempty\"`\n\tNext          string      `json:\"nextBlockHash,omitempty\"`\n\tHeight        uint32      `json:\"height\"`\n\tConfirmations int         `json:\"confirmations\"`\n\tSize          int         `json:\"size\"`\n\tTime          int64       `json:\"time,omitempty\"`\n\tVersion       json.Number `json:\"version\"`\n\tMerkleRoot    string      `json:\"merkleRoot\"`\n\tNonce         string      `json:\"nonce\"`\n\tBits          string      `json:\"bits\"`\n\tDifficulty    string      `json:\"difficulty\"`\n\tTxids         []string    `json:\"tx,omitempty\"`\n}\n  */\n export const BlockInfoCommon = requiredOptionalCodec(\n  {\n    ...Paginated.props,\n    hash: t.string, // '760f8ed32894ccce9c1ea11c8a019cadaa82bcb434b25c30102dd7e43f326217',\n    height: t.number, // 2648059,\n    confirmations: t.number, // 47,\n    size: t.number, // 951,\n    version: t.number, // 6422787,\n    merkleRoot: t.string, // '6783f6083788c4f69b8af23bd2e4a194cf36ac34d590dfd97e510fe7aebc72c8',\n    nonce: t.string, // '0',\n    bits: t.string, // '1a063f3b',\n    difficulty: t.string, // '2685605.260733312',\n    txCount: t.number, // 2,\n  },\n  {\n    previousBlockHash: t.string, // '786a1f9f38493d32fd9f9c104d748490a070bc74a83809103bcadd93ae98288f',\n    nextBlockHash: t.string, // '151615691b209de41dda4798a07e62db8429488554077552ccb1c4f8c7e9f57a',\n    time: t.number, // 1553096617,\n    txs: t.array(NormalizedTxCommon),\n  },\n  'BlockInfoCommon'\n)\nexport type BlockInfoCommon = t.TypeOf<typeof BlockInfoCommon>\n\n/**\n * Send transaction\n */\n\nexport const SendTxSuccess = t.type({\n  result: t.string, // '7c3be24063f268aaa1ed81b64776798f56088757641a34fb156c4f51ed2e9d25'\n}, 'SendTransactionSuccess')\nexport type SendTxSuccess = t.TypeOf<typeof SendTxSuccess>\n\nexport const SendTxError = t.type(\n  {\n    error: t.type({\n      message: t.string, // 'error message'\n    })\n  },\n  'SendTxFailed'\n)\nexport type SendTxError = t.TypeOf<typeof SendTxError>\n","import * as t from 'io-ts'\nimport { requiredOptionalCodec, extendCodec } from '@faast/ts-common'\nimport {\n  NormalizedTxCommonVin, NormalizedTxCommonVout, NormalizedTxCommon, AddressDetailsCommonBasic,\n  Paginated, GetAddressDetailsOptions, TokenDetailsTypeXpubAddress, TokenDetailsCommon, BlockInfoCommon\n} from './common'\n\n/*\n * Get transaction\n */\n\nexport const NormalizedTxBitcoinVin = extendCodec(\n  NormalizedTxCommonVin,\n  {\n    value: t.string, // '2895163'\n  },\n  'NormalizedTxBitcoinVin',\n)\nexport type NormalizedTxBitcoinVin = t.TypeOf<typeof NormalizedTxBitcoinVin>\n\nexport const NormalizedTxBitcoinVout = extendCodec(\n  NormalizedTxCommonVout,\n  {\n    value: t.string,\n  },\n  'NormalizedTxBitcoinVout',\n)\nexport type NormalizedTxBitcoinVout = t.TypeOf<typeof NormalizedTxBitcoinVout>\n\nexport const NormalizedTxBitcoin = extendCodec(\n  NormalizedTxCommon,\n  {\n    vin: t.array(NormalizedTxBitcoinVin),\n    vout: t.array(NormalizedTxBitcoinVout),\n    valueIn: t.string, // '2895163'\n    fees: t.string, // '302808'\n  },\n  'NormalizedTxBitcoin'\n)\nexport type NormalizedTxBitcoin = t.TypeOf<typeof NormalizedTxBitcoin>\n\n/*\n * Get transaction specific\n */\n\nexport const SpecificTxBitcoinVinScriptSig = t.type({\n  asm: t.string, // '30440220...049936719f[ALL] 03231bb7d...2636f'\n  hex: t.string, // '47304402...1f2636f'\n}, 'SpecificTxBitcoinVinScriptSig')\nexport type SpecificTxBitcoinVinScriptSig = t.TypeOf<typeof SpecificTxBitcoinVinScriptSig>\n\nexport const SpecificTxBitcoinVin = t.type({\n  txid: t.string, // 'fa0b399f8eb9813f4549fc1066a134f93d1b4c7c6563d12629227ef3faf231b6'\n  vout: t.number, // 4\n  scriptSig: SpecificTxBitcoinVinScriptSig,\n  sequence: t.number // 4294967295\n}, 'SpecificTxBitcoinVin')\nexport type SpecificTxBitcoinVin = t.TypeOf<typeof SpecificTxBitcoinVin>\n\nexport const SpecificTxBitcoinVoutScriptPubKey = t.type({\n  asm: t.string, // 'OP_HASH160 2fa547b613bf425f0308933bbaac5c67899c745d OP_EQUAL'\n  hex: t.string, // 'a9142fa547b613bf425f0308933bbaac5c67899c745d87'\n  reqSigs: t.number, // 1\n  type: t.string, // 'scripthash'\n  addresses: t.array(t.string), // ['362wgRYYj8ybZwuQzxE2PNykjJAwStKARz']\n}, 'SpecificTxBitcoinVoutScriptPubKey')\nexport type SpecificTxBitcoinVoutScriptPubKey = t.TypeOf<typeof SpecificTxBitcoinVoutScriptPubKey>\n\nexport const SpecificTxBitcoinVout = t.type({\n  value: t.number, // 0.01351072\n  n: t.number, // 0\n  scriptPubKey: SpecificTxBitcoinVoutScriptPubKey,\n}, 'SpecificTxBitcoinVout')\nexport type SpecificTxBitcoinVout = t.TypeOf<typeof SpecificTxBitcoinVout>\n\nexport const SpecificTxBitcoin = t.type({\n  txid: t.string, // '2266ea441e3fbd144e33dc6c62c0d354d59dc267b48efe9a98a6e2fe6584cbd1'\n  hash: t.string, // '2266ea441e3fbd144e33dc6c62c0d354d59dc267b48efe9a98a6e2fe6584cbd1'\n  version: t.number, // 2\n  size: t.number, // 223\n  vsize: t.number, // 223\n  weight: t.number, // 892\n  locktime: t.number, // 0\n  vin: t.array(SpecificTxBitcoinVin),\n  vout: t.array(SpecificTxBitcoinVout),\n  hex: t.string, // '0200000001b63...88ac00000000'\n  blockhash: t.string, // '0000000000000000000aac117ba0c0910956020b30e847154311d7d01d50476f'\n  confirmations: t.number, // 2\n  time: t.number, // 1574787637\n  blocktime: t.number, // 1574787637\n}, 'SpecificTxBitcoin')\nexport type SpecificTxBitcoin = t.TypeOf<typeof SpecificTxBitcoin>\n\n/**\n * Get address\n */\n\nexport const AddressDetailsBitcoinBasic = extendCodec(\n  AddressDetailsCommonBasic,\n  {\n    totalReceived: t.string, // '4331220',\n    totalSent: t.string, // '2895163',\n  },\n  'AddressDetailsBitcoinBasic'\n)\nexport type AddressDetailsBitcoinBasic = t.TypeOf<typeof AddressDetailsBitcoinBasic>\n\nexport const AddressDetailsBitcoinTokens = AddressDetailsBitcoinBasic\nexport type AddressDetailsBitcoinTokens = t.TypeOf<typeof AddressDetailsBitcoinTokens>\n\nexport const AddressDetailsBitcoinTokenBalances = AddressDetailsBitcoinBasic\nexport type AddressDetailsBitcoinTokenBalances = t.TypeOf<typeof AddressDetailsBitcoinTokenBalances>\n\nexport const AddressDetailsBitcoinTxids = extendCodec(\n  AddressDetailsBitcoinTokenBalances,\n  Paginated.props,\n  {\n    txids: t.array(t.string),\n  },\n  'AddressDetailsBitcoinTxids',\n)\nexport type AddressDetailsBitcoinTxids = t.TypeOf<typeof AddressDetailsBitcoinTxids>\n\nexport const AddressDetailsBitcoinTxs = extendCodec(\n  AddressDetailsBitcoinTokenBalances,\n  Paginated.props,\n  {\n    transactions: t.array(NormalizedTxBitcoin),\n  },\n  'AddressDetailsBitcoinTxs',\n)\nexport type AddressDetailsBitcoinTxs = t.TypeOf<typeof AddressDetailsBitcoinTxs>\n\n/**\n * Get Xpub\n */\n\nexport const GetXpubDetailsTokensOption = t.keyof({\n  nonzero: null,\n  used: null,\n  derived: null,\n}, 'GetXpubDetailsTokensOption')\nexport type GetXpubDetailsTokensOption = t.TypeOf<typeof GetXpubDetailsTokensOption>\n\nexport const GetXpubDetailsOptions = extendCodec(\n  GetAddressDetailsOptions,\n  {},\n  {\n    usedTokens: t.number, // 2\n    tokens: GetXpubDetailsTokensOption,\n  },\n  'GetXpubDetailsOptions'\n)\nexport type GetXpubDetailsOptions = t.TypeOf<typeof GetXpubDetailsOptions>\n\nexport const TokenDetailsXpubAddress = t.type({\n  type: TokenDetailsTypeXpubAddress, // 'XPUBAddress',\n  name: t.string, // 'DUCd1B3YBiXL5By15yXgSLZtEkvwsgEdqS',\n  path: t.string, // 'm/44'/3'/0'/0/0',\n  transfers: t.number, // 3,\n  decimals: t.number, // 8,\n  balance: t.string, // '0',\n  totalReceived: t.string, // '2803986975',\n  totalSent: t.string, // '2803986975'\n}, 'TokenDetailsXpubAddress')\nexport type TokenDetailsXpubAddress = t.TypeOf<typeof TokenDetailsXpubAddress>\n\nexport const TokenDetailsXpubAddressBalance = extendCodec(\n  TokenDetailsXpubAddress,\n  {\n    balance: t.string, // '850360'\n  },\n  'TokenDetailsXpubAddressBalance',\n)\nexport type TokenDetailsXpubAddressBalance = t.TypeOf<typeof TokenDetailsXpubAddressBalance>\n\nexport const XpubDetailsBasic = AddressDetailsBitcoinBasic\nexport type XpubDetailsBasic = t.TypeOf<typeof XpubDetailsBasic>\n\nexport const XpubDetailsTokens = extendCodec(\n  XpubDetailsBasic,\n  {},\n  {\n    tokens: TokenDetailsXpubAddress,\n  },\n  'XpubDetailsTokens'\n)\nexport type XpubDetailsTokens = t.TypeOf<typeof XpubDetailsTokens>\n\nexport const XpubDetailsTokenBalances = extendCodec(\n  XpubDetailsBasic,\n  {},\n  {\n    tokens: TokenDetailsXpubAddressBalance,\n  },\n  'XpubDetailsTokenBalances'\n)\nexport type XpubDetailsTokenBalances = t.TypeOf<typeof XpubDetailsTokenBalances>\n\nexport const XpubDetailsTxids = extendCodec(\n  XpubDetailsTokenBalances,\n  Paginated.props,\n  {\n    txids: t.array(t.string),\n  },\n  'XpubDetailsTxids',\n)\nexport type XpubDetailsTxids = t.TypeOf<typeof XpubDetailsTxids>\n\nexport const XpubDetailsTxs = extendCodec(\n  XpubDetailsTokenBalances,\n  Paginated.props,\n  {\n    transactions: t.array(NormalizedTxBitcoin),\n  },\n  'XpubDetailsTxs',\n)\nexport type XpubDetailsTxs = t.TypeOf<typeof XpubDetailsTxs>\n\n/**\n * Get block\n */\n\nexport const BlockInfoBitcoin = extendCodec(\n  BlockInfoCommon,\n  {},\n  {\n    txs: t.array(NormalizedTxBitcoin),\n  },\n  'BlockInfoBitcoin',\n)\nexport type BlockInfoBitcoin = t.TypeOf<typeof BlockInfoBitcoin>\n","import * as t from 'io-ts'\nimport { requiredOptionalCodec, extendCodec } from '@faast/ts-common'\nimport {\n  NormalizedTxCommonVin, NormalizedTxCommonVout, NormalizedTxCommon,\n  EthereumSpecific, TokenDetailsTypeERC20, AddressDetailsCommonBasic, Paginated, BlockInfoCommon,\n} from './common'\n\n/*\n * Get transaction\n */\n\nexport const NormalizedTxEthereumVin = extendCodec(\n  NormalizedTxCommonVin,\n  {\n    addresses: t.array(t.string), // ['0x175bf41879a45f733553d4a0385d6369f227436c'],\n  },\n  'NormalizedTxEthereumVin',\n)\nexport type NormalizedTxEthereumVin = t.TypeOf<typeof NormalizedTxEthereumVin>\n\nexport const NormalizedTxEthereumVout = extendCodec(\n  NormalizedTxCommonVout,\n  {\n    value: t.string, // '9988700000000000000',\n  },\n  'NormalizedTxEthereumVout'\n)\nexport type NormalizedTxEthereumVout = t.TypeOf<typeof NormalizedTxEthereumVout>\n\nexport const NormalizedTxEthereum = extendCodec(\n  NormalizedTxCommon,\n  {\n    vin: t.array(NormalizedTxEthereumVin),\n    vout: t.array(NormalizedTxEthereumVout),\n    fees: t.string, // '302808'\n    ethereumSpecific: EthereumSpecific,\n  },\n  'NormalizedTxEthereum',\n)\nexport type NormalizedTxEthereum = t.TypeOf<typeof NormalizedTxEthereum>\n\n/*\n * Get transaction specific\n */\n\nexport const SpecificTxEthereumTx = t.type({\n  nonce: t.string, // '0x0',\n  gasPrice: t.string, // '0x12a05f200',\n  gas: t.string, // '0xea60',\n  to: t.string, // '0x352e504813b9e0b30f9ca70efc27a52d298f6697',\n  value: t.string, // '0x8a9efdba43f1c000',\n  input: t.string, // '0x4e4e525000000000000000000...77c5fdb75413108bf',\n  hash: t.string, // '0x19bc6b578c04bfff0640834a8ab2b4bdb1d6ee4269f677d22f6c4bb20399151f',\n  blockNumber: t.string, // '0x897eb1',\n  blockHash: t.string, // '0xdfc3cb3191c782db11624cb7c66ed0b6f51d37ccdd63538b8a700587675652ad',\n  from: t.string, // '0x175bf41879a45f733553d4a0385d6369f227436c',\n  transactionIndex: t.string, // '0x53'\n}, 'SpecificTxEthereumTx')\nexport type SpecificTxEthereumTx = t.TypeOf<typeof SpecificTxEthereumTx>\n\nexport const SpecificTxEthereumReceipt = t.type({\n  gasUsed: t.string, // '0x7d58',\n  status: t.string, // '0x1',\n  logs: t.array(t.any), // [ ]\n}, 'SpecificTxEthereumReceipt')\nexport type SpecificTxEthereumReceipt = t.TypeOf<typeof SpecificTxEthereumReceipt>\n\nexport const SpecificTxEthereum = t.type({\n  tx: SpecificTxEthereumTx,\n  receipt: SpecificTxEthereumReceipt,\n}, 'SpecificTxEthereum')\nexport type SpecificTxEthereum = t.TypeOf<typeof SpecificTxEthereum>\n\n/*\n * Get address\n */\n\nexport const TokenDetailsERC20 = t.type({\n  type: TokenDetailsTypeERC20, // 'ERC20',\n  name: t.string, // 'Carrots',\n  contract: t.string, // '0x6e0646b014d99d79f4e875b6723fa8e46becbd15',\n  transfers: t.number, // 1,\n  symbol: t.string, // 'CEN',\n}, 'TokenDetailsERC20')\nexport type TokenDetailsERC20 = t.TypeOf<typeof TokenDetailsERC20>\n\nexport const TokenDetailsERC20Balance = extendCodec(\n  TokenDetailsERC20,\n  {\n    balance: t.string, // '8503600000000000000'\n  },\n  'TokenDetailsERC20Balance',\n)\nexport type TokenDetailsERC20Balance = t.TypeOf<typeof TokenDetailsERC20Balance>\n\nexport const AddressDetailsEthereumBasic = extendCodec(\n  AddressDetailsCommonBasic,\n  {\n    nonTokenTxs: t.number, // 29483,\n    nonce: t.string, // '1',\n  },\n  'AddressDetailsEthereumBasic'\n)\nexport type AddressDetailsEthereumBasic = t.TypeOf<typeof AddressDetailsEthereumBasic>\n\nexport const AddressDetailsEthereumTokens = extendCodec(\n  AddressDetailsEthereumBasic,\n  {},\n  {\n    tokens: TokenDetailsERC20,\n  },\n  'AddressDetailsEthereumTokens'\n)\nexport type AddressDetailsEthereumTokens = t.TypeOf<typeof AddressDetailsEthereumTokens>\n\nexport const AddressDetailsEthereumTokenBalances = extendCodec(\n  AddressDetailsEthereumBasic,\n  {},\n  {\n    tokens: TokenDetailsERC20Balance,\n  },\n  'AddressDetailsEthereumTokenBalances'\n)\nexport type AddressDetailsEthereumTokenBalances = t.TypeOf<typeof AddressDetailsEthereumTokenBalances>\n\nexport const AddressDetailsEthereumTxids = extendCodec(\n  AddressDetailsEthereumTokenBalances,\n  Paginated.props,\n  {\n    txids: t.array(t.string),\n  },\n  'AddressDetailsEthereumTxids',\n)\nexport type AddressDetailsEthereumTxids = t.TypeOf<typeof AddressDetailsEthereumTxids>\n\nexport const AddressDetailsEthereumTxs = extendCodec(\n  AddressDetailsEthereumTokenBalances,\n  Paginated.props,\n  {\n    transactions: t.array(NormalizedTxEthereum),\n  },\n  'AddressDetailsEthereumTxs',\n)\nexport type AddressDetailsEthereumTxs = t.TypeOf<typeof AddressDetailsEthereumTxs>\n\n/*\n * Get block\n */\n\nexport const BlockInfoEthereum = extendCodec(\n  BlockInfoCommon,\n  {},\n  {\n    txs: t.array(NormalizedTxEthereum),\n  },\n  'BlockInfoEthereum',\n)\nexport type BlockInfoEthereum = t.TypeOf<typeof BlockInfoEthereum>\n","import request from 'request-promise-native'\nimport requestErrors from 'request-promise-native/errors'\nimport { assertType, isString } from '@faast/ts-common'\nimport * as t from 'io-ts'\nimport qs from 'qs'\nimport {\n  XpubDetailsBasic, XpubDetailsTokens, XpubDetailsTokenBalances, XpubDetailsTxids, XpubDetailsTxs,\n  BlockbookConfig, SystemInfo, BlockHashResponse, GetAddressDetailsOptions,\n  UtxoDetails, UtxoDetailsXpub, GetUtxosOptions, GetXpubDetailsOptions,\n  SendTxSuccess, SendTxError,\n} from './types'\nimport { isObject } from 'util'\n\nconst xpubDetailsCodecs = {\n  basic: XpubDetailsBasic,\n  tokens: XpubDetailsTokens,\n  tokenBalances: XpubDetailsTokenBalances,\n  txids: XpubDetailsTxids,\n  txs: XpubDetailsTxs,\n}\n\nexport abstract class BaseBlockbook<\n  NormalizedTx,\n  SpecificTx,\n  BlockInfo,\n  AddressDetailsBasic,\n  AddressDetailsTokens,\n  AddressDetailsTokenBalances,\n  AddressDetailsTxids,\n  AddressDetailsTxs,\n> {\n  nodes: string[]\n  disableTypeValidation: boolean\n\n  constructor(\n    config: BlockbookConfig,\n    private normalizedTxCodec: t.Type<NormalizedTx>,\n    private specificTxCodec: t.Type<SpecificTx>,\n    private blockInfoCodec: t.Type<BlockInfo>,\n    private addressDetailsCodecs: {\n      basic: t.Type<AddressDetailsBasic>,\n      tokens: t.Type<AddressDetailsTokens>,\n      tokenBalances: t.Type<AddressDetailsTokenBalances>,\n      txids: t.Type<AddressDetailsTxids>,\n      txs: t.Type<AddressDetailsTxs>,\n    }\n  ) {\n    config = assertType(BlockbookConfig, config)\n    this.nodes = config.nodes\n    if (this.nodes.length === 0) {\n      throw new Error('Blockbook node list must not be empty')\n    }\n    this.disableTypeValidation = config.disableTypeValidation || false\n  }\n\n  doAssertType<T>(codec: t.Type<T, any, unknown>, value: unknown, ...rest: any[]): T {\n    if (this.disableTypeValidation) {\n      return value as T\n    }\n    return assertType(codec, value, ...rest)\n  }\n\n  async doRequest(method: 'GET' | 'POST', url: string, params?: object, body?: object, options?: request.Options) {\n    let node = this.nodes[0] // TODO: fallback to other nodes\n    if (!node.startsWith('http')) {\n      node = `https://${node}`\n    }\n    try {\n      return await request(`${node}${url}${params ? qs.stringify(params, { addQueryPrefix: true }) : ''}`, {\n        method,\n        body,\n        json: true,\n        ...options,\n      })\n    } catch(e) {\n      const eString = e.toString()\n      if (eString.includes('StatusCodeError')) { // Can't use instanceof here because it's not portable\n        const error = e as requestErrors.StatusCodeError\n        const body = error.response.body\n        if (isObject(body) && body.error) {\n          if (isString(body.error)) {\n            throw new Error(body.error)\n          } else if (isObject(body.error) && isString(body.error.message)) {\n            throw new Error(body.error.message)\n          }\n        }\n      }\n      throw e\n    }\n  }\n\n  async getStatus(): Promise<SystemInfo> {\n    const response = await this.doRequest('GET', '/api/v2')\n    return this.doAssertType(SystemInfo, response)\n  }\n\n  async getBlockHash(blockNumber: number): Promise<string> {\n    const response = await this.doRequest('GET', `/api/v2/block-index/${blockNumber}`)\n    const { blockHash } = this.doAssertType(BlockHashResponse, response)\n    return blockHash\n  }\n\n  async getTx(txid: string): Promise<NormalizedTx> {\n    const response = await this.doRequest('GET', `/api/v2/tx/${txid}`)\n    return this.doAssertType(this.normalizedTxCodec, response)\n  }\n\n  async getTxSpecific(txid: string): Promise<SpecificTx> {\n    const response = await this.doRequest('GET', `/api/v2/tx-specific/${txid}`)\n    return this.doAssertType(this.specificTxCodec, response)\n  }\n\n  async getAddressDetails(\n    address: string,\n    options: GetAddressDetailsOptions & { details: 'basic' },\n  ): Promise<AddressDetailsBasic>\n  async getAddressDetails(\n    address: string,\n    options: GetAddressDetailsOptions & { details: 'tokens' },\n  ): Promise<AddressDetailsTokens>\n  async getAddressDetails(\n    address: string,\n    options: GetAddressDetailsOptions & { details: 'tokenBalances' }\n  ): Promise<AddressDetailsTokenBalances>\n  async getAddressDetails(\n    address: string,\n    options?: GetAddressDetailsOptions & { details: 'txids' | undefined } | Omit<GetAddressDetailsOptions, 'details'>\n  ): Promise<AddressDetailsTxids>\n  async getAddressDetails(\n    address: string,\n    options: GetAddressDetailsOptions & { details: 'txs' },\n  ): Promise<AddressDetailsTxs>\n  async getAddressDetails(address: string, options: GetAddressDetailsOptions = {}) {\n    const response = await this.doRequest('GET', `/api/v2/address/${address}`, options)\n    const detailsLevel = options.details || 'txids'\n    const codec: t.Mixed = this.addressDetailsCodecs[detailsLevel]\n    return this.doAssertType(codec, response)\n  }\n\n  async getXpubDetails(\n    xpub: string,\n    options: GetXpubDetailsOptions & { details: 'basic' },\n  ): Promise<XpubDetailsBasic>\n  async getXpubDetails(\n    xpub: string,\n    options: GetXpubDetailsOptions & { details: 'tokens' },\n  ): Promise<XpubDetailsTokens>\n  async getXpubDetails(\n    xpub: string,\n    options: GetXpubDetailsOptions & { details: 'tokenBalances' }\n  ): Promise<XpubDetailsTokenBalances>\n  async getXpubDetails(\n    xpub: string,\n    options?: GetXpubDetailsOptions & { details: 'txids' | undefined } | Omit<GetXpubDetailsOptions, 'details'>\n  ): Promise<XpubDetailsTxids>\n  async getXpubDetails(\n    xpub: string,\n    options: GetXpubDetailsOptions & { details: 'txs' },\n  ): Promise<XpubDetailsTxs>\n  async getXpubDetails(xpub: string, options: GetXpubDetailsOptions = {}) {\n    const response = await this.doRequest('GET', `/api/v2/xpub/${xpub}`, options)\n    const detailsLevel = options.details || 'txids'\n    const codec: t.Mixed = xpubDetailsCodecs[detailsLevel]\n    return this.doAssertType(codec, response)\n  }\n\n  async getUtxosForAddress(address: string, options: GetUtxosOptions = {}): Promise<UtxoDetails[]> {\n    const response = await this.doRequest('GET', `/api/v2/utxo/${address}`, options)\n    return this.doAssertType(t.array(UtxoDetails), response)\n  }\n\n  async getUtxosForXpub(xpub: string, options: GetUtxosOptions = {}): Promise<UtxoDetailsXpub[]> {\n    const response = await this.doRequest('GET', `/api/v2/utxo/${xpub}`, options)\n    return this.doAssertType(t.array(UtxoDetailsXpub), response)\n  }\n\n  async getBlock(block: string | number): Promise<BlockInfo> {\n    const response = await this.doRequest('GET', `/api/v2/block/${block}`)\n    return this.doAssertType(this.blockInfoCodec, response)\n  }\n\n  async sendTx(txHex: string): Promise<string> {\n    const response = await this.doRequest('GET', `/api/v2/sendtx/${txHex}`)\n    if (SendTxError.is(response)) {\n      throw new Error(`blockbook sendtx returned error: ${response.error.message}`)\n    } else {\n      return (response as SendTxSuccess).result\n    }\n  }\n}\n","import * as t from 'io-ts'\nimport { BaseBlockbook } from './BaseBlockbook'\nimport {\n  BlockbookConfig,\n  NormalizedTxCommon,\n  BlockInfoCommon,\n  AddressDetailsCommonBasic,\n  AddressDetailsCommonTokens,\n  AddressDetailsCommonTokenBalances,\n  AddressDetailsCommonTxids,\n  AddressDetailsCommonTxs,\n} from './types'\n\n/**\n * A common implementation of the blockbook wrapper without any coin specific typings\n */\nexport class Blockbook extends BaseBlockbook<\n  NormalizedTxCommon,\n  any,\n  BlockInfoCommon,\n  AddressDetailsCommonBasic,\n  AddressDetailsCommonTokens,\n  AddressDetailsCommonTokenBalances,\n  AddressDetailsCommonTxids,\n  AddressDetailsCommonTxs\n> {\n  constructor(config: BlockbookConfig) {\n    super(\n      config,\n      NormalizedTxCommon,\n      t.any,\n      BlockInfoCommon,\n      {\n        basic: AddressDetailsCommonBasic,\n        tokens: AddressDetailsCommonTokens,\n        tokenBalances: AddressDetailsCommonTokenBalances,\n        txids: AddressDetailsCommonTxids,\n        txs: AddressDetailsCommonTxs,\n      }\n    )\n  }\n}\n","import { BaseBlockbook } from './BaseBlockbook'\nimport {\n  BlockbookConfig,\n  NormalizedTxBitcoin,\n  SpecificTxBitcoin,\n  BlockInfoBitcoin,\n  AddressDetailsBitcoinBasic,\n  AddressDetailsBitcoinTokens,\n  AddressDetailsBitcoinTokenBalances,\n  AddressDetailsBitcoinTxids,\n  AddressDetailsBitcoinTxs,\n} from './types'\n\n/**\n * An implementation of the blockbook wrapper with typings for Bitcoin (and Bitcoin-like coins)\n */\nexport class BlockbookBitcoin extends BaseBlockbook<\n  NormalizedTxBitcoin,\n  SpecificTxBitcoin,\n  BlockInfoBitcoin,\n  AddressDetailsBitcoinBasic,\n  AddressDetailsBitcoinTokens,\n  AddressDetailsBitcoinTokenBalances,\n  AddressDetailsBitcoinTxids,\n  AddressDetailsBitcoinTxs\n> {\n  constructor(config: BlockbookConfig) {\n    super(\n      config,\n      NormalizedTxBitcoin,\n      SpecificTxBitcoin,\n      BlockInfoBitcoin,\n      {\n        basic: AddressDetailsBitcoinBasic,\n        tokens: AddressDetailsBitcoinTokens,\n        tokenBalances: AddressDetailsBitcoinTokenBalances,\n        txids: AddressDetailsBitcoinTxids,\n        txs: AddressDetailsBitcoinTxs,\n      }\n    )\n  }\n}\n","import { BaseBlockbook } from './BaseBlockbook'\nimport {\n  BlockbookConfig,\n  NormalizedTxEthereum,\n  SpecificTxEthereum,\n  BlockInfoEthereum,\n  AddressDetailsEthereumBasic,\n  AddressDetailsEthereumTokens,\n  AddressDetailsEthereumTokenBalances,\n  AddressDetailsEthereumTxids,\n  AddressDetailsEthereumTxs,\n} from './types'\n\n/**\n * An implementation of the blockbook wrapper with typings for Ethereum (and Ethereum-like coins)\n */\nexport class BlockbookEthereum extends BaseBlockbook<\n  NormalizedTxEthereum,\n  SpecificTxEthereum,\n  BlockInfoEthereum,\n  AddressDetailsEthereumBasic,\n  AddressDetailsEthereumTokens,\n  AddressDetailsEthereumTokenBalances,\n  AddressDetailsEthereumTxids,\n  AddressDetailsEthereumTxs\n> {\n  constructor(config: BlockbookConfig) {\n    super(\n      config,\n      NormalizedTxEthereum,\n      SpecificTxEthereum,\n      BlockInfoEthereum,\n      {\n        basic: AddressDetailsEthereumBasic,\n        tokens: AddressDetailsEthereumTokens,\n        tokenBalances: AddressDetailsEthereumTokenBalances,\n        txids: AddressDetailsEthereumTxids,\n        txs: AddressDetailsEthereumTxs,\n      }\n    )\n  }\n\n  async getXpubDetails(): Promise<never> {\n    throw new Error('BlockbookEthereum.getXpubDetails not supported')\n  }\n\n  async getUtxosForAddress(): Promise<never> {\n    throw new Error('BlockbookEthereum.getUtxosForAddress not supported')\n  }\n\n  async getUtxosForXpub(): Promise<never> {\n    throw new Error('BlockbookEthereum.getUtxosForXpub not supported')\n  }\n}\n"],"names":["t.type","t.number","requiredOptionalCodec","t.array","t.string","t.boolean","t.keyof","t.partial","t.literal","t.union","extendCodec","t.any","assertType","isObject","isString"],"mappings":"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"}